<!doctype html>
<html>
<head></head>
<body>
	<h1>Interview test</h1>
	<p>You have to implement missing part of the application (`Parallel`) that making the code to be compiled and executed without exceptions and assertions in browser console.</p>
	<script>
	/*
	* You have to implement missing part of the application that making code below (which untouchble) 
	* to be compiled and executed without exceptions and assertions.
	*/
	
	class Parallel{
		constructor({ parallelJobs } = {}){
			this.parallelJobs = parallelJobs;
			this.callQueue = new Map();
			this.pool = new Map();
			this.result = [];
			this.poolEnd;
		}

		startQueue(id) {
			this.callQueue.get(id).then((value) => {
				this.clearItem(id);
				this.result.push(value)
				this.work(this.getNextKey(this.pool));
			});

		}
		addToQueue(id) {
			if(this.callQueue.size < this.parallelJobs) {
				if(!this.callQueue.has(id) && this.pool.has(id)) {
					this.callQueue.set(id, this.pool.get(id)());
					this.startQueue(id);
				}
			}
			return this;
		}
		clearItem(id) {
			this.callQueue.delete(id);
			this.pool.delete(id);
		}
		clearAll() {
			this.callQueue.clear();
			this.pool.clear();
		}
		poolEnd() {}
		done(func) {
			this.poolEnd = func;
	
			return this;
		}
		getNextKey(obj) {
			const keys = obj.keys();

			return keys.next().value;
		}
		getId() {
			return '_' + Math.random().toString(36).substr(2, 9);
		}
		jobsPool(func) {
			const promise = new Promise((resolve, reject) => {
				func(resolve);
			});

			return promise;

		}
		work(id) {
			if(this.pool.size > 0) {
				this.addToQueue(id);
			} else {
				this.poolEnd(this.result);
				this.clearAll();
			}
			
		}
		job(func) {
			const id = this.getId();
			this.pool.set(id, this.jobsPool.bind(this, func));
			this.work(id);

			return this;
		}
	}

	</script>
	<script>
	/************************************************
	* Please don`t change the code bellow this line *
	************************************************/
	var runner = new Parallel({
		parallelJobs: 2
	});

	runner.job(step1)
		.job(step2)
		.job(step3)
		.job(step4)
		.done(onDone);

	function step1(done) {
		console.log('step1');
		setTimeout(done, 1000, 'hello world');
	}

	function step2(done) {
		console.log('step2');
		setTimeout(done, 1200, 'Job succeded');
	}

	function step3(done) {
		console.log('step3');
		setTimeout(done, 1500, 'step3');
	}

	function step4(done) {
		console.log('step4');
		setTimeout(done, 100, 'step4');
	}

	var isPassed = false;
	function onDone(results) {
		console.log('onDone', results);
		console.assert(Array.isArray(results), 'expect result to be array');
		console.assert(results[0] === 'hello world', 'Wrong answer 1');
		console.assert(results[1] === 'Job succeded', 'Wrong answer 2');
		console.assert(results[2] === 'step3', 'Wrong answer 3');
		console.assert(results[3] === 'step4', 'Wrong answer 4');
		console.log('Thanks, all works fine');
		isPassed = true;
	}

	setTimeout(function(){
		if(isPassed) return;
		console.error('Test is not done.');
	}, 10000);
	</script>
</body>
</html>